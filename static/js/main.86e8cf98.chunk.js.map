{"version":3,"sources":["components/title.js","components/description.js","logic/dna.js","logic/population.js","components/start-button.js","components/label.js","components/statistics.js","components/population-render.js","components/demo.js","components/text-input.js","components/range-input.js","components/inputs.js","App.js","serviceWorker.js","index.js"],"names":["Title","text","defaultProps","Description","split","map","index","Fragment","key","DNA","length","this","genes","fitness","i","getRandomChar","targetPhrase","numCharMatch","charAt","Math","max","pow","other","result","splitIndex","floor","random","mutationRate","charCode","String","fromCharCode","join","Population","populationSize","generationCount","bestPhrase","bestFitness","averageFitness","currentBestFitness","currentWorstFitness","targetFitness","population","push","calculateFitness","updateStatistics","newPopulation","firstDNA","getRandomDNA","secondDNA","newDNA","crossover","mutate","getTotalFitness","dna","getFitness","toString","rand","totalFitness","StartButton","onStart","className","type","value","onClick","Label","Statistics","getFitnessString","round","PopulationRender","populationArr","numCols","ceil","perCol","trunc","remainder","pops","slice","pop","word","j","Demo","TextInput","placeholder","id","onChange","RangeInput","min","step","defaultValue","Inputs","App","props","updateState","e","setState","target","start","blur","state","isRunning","update","isFinished","nextGeneration","getGenerationCount","getBestPhrase","getBestFitness","getAverageFitness","getCurrentBestFitness","getCurrentWorstFitness","getPopulationArr","timer","setInterval","clearInterval","Number","href","bannerColor","octoColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86e8cf98.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Title = ({ text }) => {\r\n  return <h1>{text}</h1>;\r\n};\r\n\r\nTitle.defaultProps = {\r\n  text: \"Default Title\"\r\n};\r\n\r\nTitle.propTypes = {\r\n  text: PropTypes.string\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Description = ({ text }) => {\r\n  const addLineBreaks = string =>\r\n    string.split(\"\\n\").map((text, index) => (\r\n      <React.Fragment key={`${text}-${index}`}>\r\n        {text}\r\n        <br />\r\n      </React.Fragment>\r\n    ));\r\n\r\n  return <h5>{addLineBreaks(text)}</h5>;\r\n};\r\n\r\nDescription.defaultProps = {\r\n  text: \"Default description\"\r\n};\r\n\r\nDescription.propTypes = {\r\n  text: PropTypes.string\r\n};\r\n\r\nexport default Description;\r\n","class DNA {\r\n  /**\r\n   *Creates a DNA with the given length and random characters as genes.\r\n   * @param {number} length How length of the genes sequences\r\n   */\r\n  constructor(length) {\r\n    this.genes = [];\r\n    this.fitness = 0;\r\n\r\n    // Set genes to random characters\r\n    for (let i = 0; i < length; i++) {\r\n      this.genes[i] = this.getRandomChar();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates the fitness based on how many characters match.\r\n   * @param {string} targetPhrase The target phrase to evolve\r\n   */\r\n  calculateFitness(targetPhrase) {\r\n    let numCharMatch = 0;\r\n\r\n    // Count matching characters\r\n    for (let i = 0; i < this.genes.length; i++) {\r\n      if (this.genes[i] === targetPhrase.charAt(i)) {\r\n        numCharMatch++;\r\n      }\r\n    }\r\n\r\n    // Update the fitness, squaring for exponential fitness\r\n    this.fitness = Math.max(\r\n      0.01,\r\n      Math.pow(numCharMatch / targetPhrase.length, 2)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Genetic crossover between this DNA and the other's DNA.\r\n   * @param {DNA} other The DNA to crossover with\r\n   */\r\n  crossover(other) {\r\n    let result = new DNA(this.genes.length);\r\n\r\n    // Get a random index to split the DNA\r\n    let splitIndex = Math.floor(Math.random(this.genes.length));\r\n\r\n    // Create the crossover genes\r\n    for (let i = 0; i < this.genes.length; i++) {\r\n      result.genes[i] = i > splitIndex ? this.genes[i] : other.genes[i];\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Mutate each gene to a random character with the given mutation rate.\r\n   * @param {number} mutationRate The mutation rate as a decimal from 0 to 1\r\n   */\r\n  mutate(mutationRate) {\r\n    for (let i = 0; i < this.genes.length; i++) {\r\n      if (Math.random() < mutationRate) {\r\n        this.genes[i] = this.getRandomChar();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a random ASCII char from code 32 to 126.\r\n   */\r\n  getRandomChar() {\r\n    let startCharCode = 32;\r\n    let endCharCode = 126;\r\n    let charCode =\r\n      startCharCode + Math.random() * (endCharCode - startCharCode + 1);\r\n    return String.fromCharCode(charCode);\r\n  }\r\n\r\n  /**\r\n   * Returns this DNA's fitness.\r\n   * @return {number} The fitness\r\n   */\r\n  getFitness() {\r\n    return this.fitness;\r\n  }\r\n\r\n  /**\r\n   * Return the string representation of the genes.\r\n   * @return {string} The string representation of the genes\r\n   */\r\n  toString() {\r\n    return this.genes.join(\"\");\r\n  }\r\n}\r\n\r\nexport default DNA;\r\n","import DNA from \"./dna\";\r\n\r\nclass Population {\r\n  /**\r\n   * Creates a population with the specified parameters.\r\n   * @param {string} targetPhrase The target phrase to evolve\r\n   * @param {number} populationSize The population size as an integer\r\n   * @param {number} mutationRate The mutation rate as a decimal from 0 to 1\r\n   */\r\n  constructor(targetPhrase, populationSize, mutationRate) {\r\n    this.targetPhrase = targetPhrase;\r\n    this.populationSize = populationSize;\r\n    this.mutationRate = mutationRate;\r\n\r\n    // Statistics\r\n    this.generationCount = 0;\r\n    this.bestPhrase = \"\";\r\n    this.bestFitness = 0;\r\n    this.averageFitness = 0;\r\n    this.currentBestFitness = 0;\r\n    this.currentWorstFitness = 0;\r\n    this.targetFitness = 1; // Should this be const?\r\n\r\n    // Create the population\r\n    this.population = [];\r\n    for (let i = 0; i < populationSize; i++) {\r\n      this.population.push(new DNA(targetPhrase.length));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates the fitness for each DNA in the population.\r\n   */\r\n  calculateFitness() {\r\n    for (const dna of this.population) {\r\n      dna.calculateFitness(this.targetPhrase);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates the fitness of the current population and generates a new population through natural selection.\r\n   */\r\n  nextGeneration() {\r\n    this.calculateFitness();\r\n    this.updateStatistics();\r\n\r\n    let newPopulation = [];\r\n\r\n    // Choose two random from the old population, crossover, mutate, then add to new generation\r\n    for (let i = 0; i < this.populationSize; i++) {\r\n      let firstDNA = this.getRandomDNA();\r\n      let secondDNA = this.getRandomDNA();\r\n\r\n      // Crossover and mutate\r\n      let newDNA = firstDNA.crossover(secondDNA);\r\n      newDNA.mutate(this.mutationRate);\r\n\r\n      // Add to new population\r\n      newPopulation.push(newDNA);\r\n    }\r\n\r\n    // Set old population to new population and update statistics\r\n    this.population = newPopulation;\r\n  }\r\n\r\n  /**\r\n   * Updates the statistics.\r\n   */\r\n  updateStatistics() {\r\n    this.generationCount++;\r\n    this.averageFitness = this.getTotalFitness() / this.populationSize;\r\n\r\n    this.currentBestFitness = 0;\r\n    this.currentWorstFitness = 0;\r\n\r\n    for (const dna of this.population) {\r\n      let fitness = dna.getFitness();\r\n\r\n      // Best fitness of all time\r\n      if (fitness > this.bestFitness) {\r\n        this.bestFitness = fitness;\r\n        this.bestPhrase = dna.toString();\r\n      }\r\n\r\n      // Best fitness for this current generation\r\n      if (fitness > this.currentBestFitness) {\r\n        this.currentBestFitness = fitness;\r\n      }\r\n\r\n      // Worst fitness for this current generation\r\n      if (\r\n        this.currentWorstFitness === 0 ||\r\n        fitness < this.currentWorstFitness\r\n      ) {\r\n        this.currentWorstFitness = fitness;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a random DNA from the population.\r\n   * @return {DNA} The random DNA\r\n   */\r\n  getRandomDNA() {\r\n    let i = 0;\r\n    let rand = Math.random();\r\n    let totalFitness = this.getTotalFitness();\r\n\r\n    while (rand >= 0) {\r\n      rand -= this.population[i].getFitness() / totalFitness;\r\n      i++;\r\n    }\r\n\r\n    return this.population[i - 1];\r\n  }\r\n\r\n  /**\r\n   * Returns the total fitness of all DNA's in the population.\r\n   * @return {number} The total fitness\r\n   */\r\n  getTotalFitness() {\r\n    let totalFitness = 0;\r\n\r\n    for (const dna of this.population) {\r\n      totalFitness += dna.getFitness();\r\n    }\r\n\r\n    return totalFitness;\r\n  }\r\n\r\n  /**\r\n   * Evolution is finished when the best fitness equals the target fitness.\r\n   */\r\n  isFinished() {\r\n    return this.bestFitness >= this.targetFitness;\r\n  }\r\n\r\n  /**\r\n   * Returns the generation count.\r\n   * @return {number} The generation count\r\n   */\r\n  getGenerationCount() {\r\n    return this.generationCount;\r\n  }\r\n\r\n  /**\r\n   * Returns the best phrase.\r\n   * @return {string} The best phrase\r\n   */\r\n  getBestPhrase() {\r\n    return this.bestPhrase;\r\n  }\r\n\r\n  /**\r\n   * Returns the best fitness.\r\n   * @return {number} The best fitness\r\n   */\r\n  getBestFitness() {\r\n    return this.bestFitness;\r\n  }\r\n\r\n  /**\r\n   * Returns the average fitness.\r\n   * @return {number} The average fitness\r\n   */\r\n  getAverageFitness() {\r\n    return this.averageFitness;\r\n  }\r\n\r\n  /**\r\n   * Returns the current best fitness.\r\n   * @return {number} The current best fitness\r\n   */\r\n  getCurrentBestFitness() {\r\n    return this.currentBestFitness;\r\n  }\r\n\r\n  /**\r\n   * Returns the current worst fitness.\r\n   * @return {number} The current worst fitness\r\n   */\r\n  getCurrentWorstFitness() {\r\n    return this.currentWorstFitness;\r\n  }\r\n\r\n  /**\r\n   * Returns the population as an array of strings.\r\n   * @return {Array} The population as an array of strings.\r\n   */\r\n  getPopulationArr() {\r\n    return this.population.map(dna => dna.toString());\r\n  }\r\n}\r\n\r\nexport default Population;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst StartButton = ({ onStart }) => {\r\n  return (\r\n    <input\r\n      className=\"btn btn-primary btn-lg\"\r\n      type=\"button\"\r\n      value=\"Start\"\r\n      onClick={onStart}\r\n    />\r\n  );\r\n};\r\n\r\nStartButton.propTypes = {\r\n  onStart: PropTypes.func.isRequired\r\n};\r\n\r\nexport default StartButton;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Label = ({ text, value }) => {\r\n  return (\r\n    <h5 className=\"text-break\">\r\n      {text}: {value}\r\n    </h5>\r\n  );\r\n};\r\n\r\nLabel.defaultProps = {\r\n  text: \"\",\r\n  value: 0\r\n};\r\n\r\nLabel.propTypes = {\r\n  text: PropTypes.string,\r\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\r\n};\r\n\r\nexport default Label;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Label from \"./label\";\r\n\r\nconst Statistics = ({\r\n  generationCount,\r\n  bestPhrase,\r\n  bestFitness,\r\n  averageFitness,\r\n  currentBestFitness,\r\n  currentWorstFitness\r\n}) => {\r\n  const getFitnessString = fitness => {\r\n    return Math.round(fitness * 100) + \"%\";\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Label text=\"Generations\" value={generationCount} />\r\n      <Label text=\"Best phrase\" value={bestPhrase} />\r\n      <Label text=\"Best fitness\" value={getFitnessString(bestFitness)} />\r\n      <Label text=\"Average fitness\" value={getFitnessString(averageFitness)} />\r\n      <Label\r\n        text=\"Current best fitness\"\r\n        value={getFitnessString(currentBestFitness)}\r\n      />\r\n      <Label\r\n        text=\"Current worst fitness\"\r\n        value={getFitnessString(currentWorstFitness)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistics.defaultProps = {\r\n  generationCount: 0,\r\n  bestPhrase: \"\",\r\n  bestFitness: 0,\r\n  averageFitness: 0,\r\n  currentBestFitness: 0,\r\n  currentWorstFitness: 0\r\n};\r\n\r\nStatistics.propTypes = {\r\n  generationCount: PropTypes.number,\r\n  bestPhrase: PropTypes.string,\r\n  bestFitness: PropTypes.number,\r\n  averageFitness: PropTypes.number,\r\n  currentBestFitness: PropTypes.number,\r\n  currentWorstFitness: PropTypes.number\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst COL_THRESHOLD = 25;\r\n\r\nconst PopulationRender = ({ populationArr }) => {\r\n  const numCols = Math.ceil(populationArr.length / COL_THRESHOLD);\r\n  const perCol = Math.trunc(populationArr.length / numCols);\r\n  let remainder = populationArr.length % numCols;\r\n\r\n  const pops = [];\r\n  for (let i = 0; i < numCols; i++) {\r\n    pops.push(populationArr.slice(i * perCol, i * perCol + perCol));\r\n  }\r\n\r\n  for (let i = 0; i < remainder; i++) {\r\n    pops[pops.length - 1 - i].push(populationArr[populationArr.length - 1 - i]);\r\n  }\r\n\r\n  return pops.map((pop, i) => {\r\n    return (\r\n      <div className=\"col col-auto\" key={i}>\r\n        {pop.map((word, j) => {\r\n          return (\r\n            <div className=\"row\" key={String(i + j)}>\r\n              <div className=\"col\">\r\n                <h5>{word}</h5>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\nPopulationRender.defaultProps = {\r\n  populationArr: [],\r\n};\r\n\r\nPopulationRender.propTypes = {\r\n  populationArr: PropTypes.array,\r\n};\r\n\r\nexport default PopulationRender;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Statistics from \"./statistics\";\r\nimport PopulationRender from \"./population-render\";\r\n\r\nconst Demo = ({\r\n  generationCount,\r\n  bestPhrase,\r\n  bestFitness,\r\n  averageFitness,\r\n  currentBestFitness,\r\n  currentWorstFitness,\r\n  populationArr,\r\n}) => {\r\n  return (\r\n    <div className=\"row justify-content-center pt-5 pb-5\">\r\n      <div className=\"col col-12 col-sm-6\">\r\n        <Statistics\r\n          generationCount={generationCount}\r\n          bestPhrase={bestPhrase}\r\n          bestFitness={bestFitness}\r\n          averageFitness={averageFitness}\r\n          currentBestFitness={currentBestFitness}\r\n          currentWorstFitness={currentWorstFitness}\r\n        />\r\n      </div>\r\n      <div className=\"col col-12 col-sm-6\">\r\n        <div className=\"row justify-content-center\">\r\n          <PopulationRender populationArr={populationArr} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nDemo.defaultProps = {\r\n  generationCount: 0,\r\n  bestPhrase: \"\",\r\n  bestFitness: 0,\r\n  averageFitness: 0,\r\n  currentBestFitness: 0,\r\n  currentWorstFitness: 0,\r\n  populationArr: [],\r\n};\r\n\r\nDemo.propTypes = {\r\n  generationCount: PropTypes.number,\r\n  bestPhrase: PropTypes.string,\r\n  bestFitness: PropTypes.number,\r\n  averageFitness: PropTypes.number,\r\n  currentBestFitness: PropTypes.number,\r\n  currentWorstFitness: PropTypes.number,\r\n  populationArr: PropTypes.array,\r\n};\r\n\r\nexport default Demo;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TextInput = ({ placeholder, id, onChange }) => {\r\n  return (\r\n    <input type=\"text\" placeholder={placeholder} id={id} onChange={onChange} />\r\n  );\r\n};\r\n\r\nTextInput.defaultProps = {\r\n  placeholder: \"\",\r\n  id: \"\"\r\n};\r\n\r\nTextInput.propTypes = {\r\n  placeholder: PropTypes.string,\r\n  id: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TextInput;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst RangeInput = ({ min, max, step, defaultValue, id, onChange }) => {\r\n  return (\r\n    <input\r\n      type=\"range\"\r\n      min={min}\r\n      max={max}\r\n      step={step}\r\n      defaultValue={defaultValue}\r\n      id={id}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n};\r\n\r\nRangeInput.defaultProps = {\r\n  min: 0,\r\n  max: 1,\r\n  step: 1,\r\n  defaultValue: 0,\r\n  id: \"\"\r\n};\r\n\r\nRangeInput.propTypes = {\r\n  min: PropTypes.number,\r\n  max: PropTypes.number,\r\n  step: PropTypes.number,\r\n  defaultValue: PropTypes.number,\r\n  id: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default RangeInput;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TextInput from \"./text-input\";\r\nimport RangeInput from \"./range-input\";\r\nimport Label from \"./label\";\r\n\r\nconst Inputs = ({ onChange, targetPhrase, populationSize, mutationRate }) => {\r\n  return (\r\n    <div className=\"row justify-content-center pt-3 pb-3\">\r\n      <div className=\"col col-12 col-sm-6 col-lg-3 align-self-center\">\r\n        <TextInput\r\n          placeholder=\"Enter target phrase\"\r\n          id=\"targetPhrase\"\r\n          onChange={onChange}\r\n        />\r\n        <Label text=\"Target phrase\" value={targetPhrase} />\r\n      </div>\r\n      <div className=\"col col-12 col-sm-6 col-lg-3 align-self-center\">\r\n        <RangeInput\r\n          min={10}\r\n          max={1000}\r\n          step={10}\r\n          defaultValue={populationSize}\r\n          id=\"populationSize\"\r\n          onChange={onChange}\r\n        />\r\n        <Label text=\"Population size\" value={populationSize} />\r\n      </div>\r\n      <div className=\"col col-12 col-sm-6 col-lg-3 align-self-center\">\r\n        <RangeInput\r\n          min={0}\r\n          max={100}\r\n          step={1}\r\n          defaultValue={mutationRate}\r\n          id=\"mutationRate\"\r\n          onChange={onChange}\r\n        />\r\n        <Label text=\"Mutation rate\" value={mutationRate + \"%\"} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nInputs.defaultProps = {\r\n  targetPhrase: \"\",\r\n  populationSize: 0,\r\n  mutationRate: 0,\r\n};\r\n\r\nInputs.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  targetPhrase: PropTypes.string,\r\n  populationSize: PropTypes.number,\r\n  mutationRate: PropTypes.number,\r\n};\r\n\r\nexport default Inputs;\r\n","import React, { Component } from \"react\";\nimport Title from \"./components/title\";\nimport Description from \"./components/description\";\nimport Population from \"./logic/population\";\nimport StartButton from \"./components/start-button\";\nimport Demo from \"./components/demo\";\nimport Inputs from \"./components/inputs\";\nimport GithubCorner from \"react-github-corner\";\n\nconst frameRate = 60;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      targetPhrase: \"\",\n      populationSize: 50,\n      mutationRate: 5,\n      generationCount: 0,\n      bestPhrase: \"\",\n      bestFitness: 0,\n      averageFitness: 0,\n      currentBestFitness: 0,\n      currentWorstFitness: 0,\n      populationArr: [],\n      isRunning: false,\n    };\n  }\n\n  updateState = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  start = (e) => {\n    e.target.blur();\n\n    if (this.state.targetPhrase.length > 0) {\n      this.population = new Population(\n        this.state.targetPhrase,\n        this.state.populationSize,\n        this.state.mutationRate * 0.01\n      );\n      this.setState({\n        isRunning: true,\n      });\n    }\n  };\n\n  componentDidMount() {\n    this.timer = setInterval(() => this.update(), 1000 / frameRate);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  update = () => {\n    if (this.state.isRunning) {\n      if (this.population.isFinished()) {\n        this.setState({\n          isRunning: false,\n        });\n      }\n\n      this.population.nextGeneration();\n      this.setState({\n        generationCount: this.population.getGenerationCount(),\n        bestPhrase: this.population.getBestPhrase(),\n        bestFitness: this.population.getBestFitness(),\n        averageFitness: this.population.getAverageFitness(),\n        currentBestFitness: this.population.getCurrentBestFitness(),\n        currentWorstFitness: this.population.getCurrentWorstFitness(),\n        populationArr: this.population.getPopulationArr(),\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App container text-center pt-5\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <Title text=\"Infinite Monkey Genetic Algorithm\" />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <Description\n              text={\n                \"Demonstrates the infinite monkey theorem using genetic algorithm.\\nEnter your desired phrase, adjust the evolution parameters, and watch your phrase evolve.\"\n              }\n            />\n          </div>\n        </div>\n        <Inputs\n          onChange={this.updateState}\n          targetPhrase={this.state.targetPhrase}\n          populationSize={Number(this.state.populationSize)}\n          mutationRate={Number(this.state.mutationRate)}\n        />\n        <div className=\"row\">\n          <div className=\"col\">\n            <StartButton onStart={(e) => this.start(e)} />\n          </div>\n        </div>\n        <Demo\n          generationCount={this.state.generationCount}\n          bestPhrase={this.state.bestPhrase}\n          bestFitness={this.state.bestFitness}\n          averageFitness={this.state.averageFitness}\n          currentBestFitness={this.state.currentBestFitness}\n          currentWorstFitness={this.state.currentWorstFitness}\n          populationArr={this.state.populationArr}\n        />\n        <GithubCorner\n          href=\"https://github.com/ryantran2165/infinite-monkey-genetic-algorithm\"\n          bannerColor=\"#222\"\n          octoColor=\"#7fffd4\"\n          target=\"_blank\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}