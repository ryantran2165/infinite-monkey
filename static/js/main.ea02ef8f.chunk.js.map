{"version":3,"sources":["logic/dna.js","logic/population.js","components/button.js","components/population-render.js","App.js","serviceWorker.js","index.js"],"names":["DNA","length","this","genes","fitness","i","getRandomChar","targetPhrase","numCharMatch","charAt","Math","max","pow","other","result","splitIndex","floor","random","mutationRate","charCode","String","fromCharCode","join","Population","populationSize","generationCount","bestPhrase","bestFitness","averageFitness","currentBestFitness","currentWorstFitness","population","push","calculateFitness","updateStatistics","newPopulation","firstDNA","getRandomDNA","secondDNA","newDNA","crossover","mutate","getTotalFitness","dna","getFitness","toString","rand","totalFitness","map","Button","value","onClick","className","type","e","target","blur","PopulationRender","populationArr","numCols","ceil","perCol","trunc","remainder","pops","slice","pop","key","word","j","defaultProps","App","props","handleOnChangeState","setState","id","handleOnClickStart","state","isRunning","update","isFinished","nextGeneration","getGenerationCount","getBestPhrase","getBestFitness","getAverageFitness","getCurrentBestFitness","getCurrentWorstFitness","getPopulationArr","getFitnessString","round","timer","setInterval","clearInterval","placeholder","onChange","min","step","defaultValue","href","bannerColor","octoColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea02ef8f.chunk.js","sourcesContent":["class DNA {\r\n  /**\r\n   *Creates a DNA with the given length and random characters as genes.\r\n   * @param {number} length How length of the genes sequences\r\n   */\r\n  constructor(length) {\r\n    this.genes = [];\r\n    this.fitness = 0;\r\n\r\n    // Set genes to random characters\r\n    for (let i = 0; i < length; i++) {\r\n      this.genes[i] = this.getRandomChar();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates the fitness based on how many characters match.\r\n   * @param {string} targetPhrase The target phrase to evolve\r\n   */\r\n  calculateFitness(targetPhrase) {\r\n    let numCharMatch = 0;\r\n\r\n    // Count matching characters\r\n    for (let i = 0; i < this.genes.length; i++) {\r\n      if (this.genes[i] === targetPhrase.charAt(i)) {\r\n        numCharMatch++;\r\n      }\r\n    }\r\n\r\n    // Update the fitness, squaring for exponential fitness\r\n    this.fitness = Math.max(\r\n      0.01,\r\n      Math.pow(numCharMatch / targetPhrase.length, 2)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Genetic crossover between this DNA and the other's DNA.\r\n   * @param {DNA} other The DNA to crossover with\r\n   */\r\n  crossover(other) {\r\n    let result = new DNA(this.genes.length);\r\n\r\n    // Get a random index to split the DNA\r\n    let splitIndex = Math.floor(Math.random(this.genes.length));\r\n\r\n    // Create the crossover genes\r\n    for (let i = 0; i < this.genes.length; i++) {\r\n      result.genes[i] = i > splitIndex ? this.genes[i] : other.genes[i];\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Mutate each gene to a random character with the given mutation rate.\r\n   * @param {number} mutationRate The mutation rate as a decimal from 0 to 1\r\n   */\r\n  mutate(mutationRate) {\r\n    for (let i = 0; i < this.genes.length; i++) {\r\n      if (Math.random() < mutationRate) {\r\n        this.genes[i] = this.getRandomChar();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a random ASCII char from code 32 to 126.\r\n   */\r\n  getRandomChar() {\r\n    let startCharCode = 32;\r\n    let endCharCode = 126;\r\n    let charCode =\r\n      startCharCode + Math.random() * (endCharCode - startCharCode + 1);\r\n    return String.fromCharCode(charCode);\r\n  }\r\n\r\n  /**\r\n   * Returns this DNA's fitness.\r\n   * @return {number} The fitness\r\n   */\r\n  getFitness() {\r\n    return this.fitness;\r\n  }\r\n\r\n  /**\r\n   * Return the string representation of the genes.\r\n   * @return {string} The string representation of the genes\r\n   */\r\n  toString() {\r\n    return this.genes.join(\"\");\r\n  }\r\n}\r\n\r\nexport default DNA;\r\n","import DNA from \"./dna\";\r\n\r\nconst TARGET_FITNESS = 1;\r\n\r\nclass Population {\r\n  /**\r\n   * Creates a population with the specified parameters.\r\n   * @param {string} targetPhrase The target phrase to evolve\r\n   * @param {number} populationSize The population size as an integer\r\n   * @param {number} mutationRate The mutation rate as a decimal from 0 to 1\r\n   */\r\n  constructor(targetPhrase, populationSize, mutationRate) {\r\n    this.targetPhrase = targetPhrase;\r\n    this.populationSize = populationSize;\r\n    this.mutationRate = mutationRate;\r\n\r\n    // Statistics\r\n    this.generationCount = 0;\r\n    this.bestPhrase = \"\";\r\n    this.bestFitness = 0;\r\n    this.averageFitness = 0;\r\n    this.currentBestFitness = 0;\r\n    this.currentWorstFitness = 0;\r\n\r\n    // Create the population\r\n    this.population = [];\r\n    for (let i = 0; i < populationSize; i++) {\r\n      this.population.push(new DNA(targetPhrase.length));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates the fitness for each DNA in the population.\r\n   */\r\n  calculateFitness() {\r\n    for (const dna of this.population) {\r\n      dna.calculateFitness(this.targetPhrase);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates the fitness of the current population and generates a new population through natural selection.\r\n   */\r\n  nextGeneration() {\r\n    this.calculateFitness();\r\n    this.updateStatistics();\r\n\r\n    let newPopulation = [];\r\n\r\n    // Choose two random from the old population, crossover, mutate, then add to new generation\r\n    for (let i = 0; i < this.populationSize; i++) {\r\n      let firstDNA = this.getRandomDNA();\r\n      let secondDNA = this.getRandomDNA();\r\n\r\n      // Crossover and mutate\r\n      let newDNA = firstDNA.crossover(secondDNA);\r\n      newDNA.mutate(this.mutationRate);\r\n\r\n      // Add to new population\r\n      newPopulation.push(newDNA);\r\n    }\r\n\r\n    // Set old population to new population and update statistics\r\n    this.population = newPopulation;\r\n\r\n    this.calculateFitness();\r\n    this.updateStatistics();\r\n  }\r\n\r\n  /**\r\n   * Updates the statistics.\r\n   */\r\n  updateStatistics() {\r\n    this.generationCount++;\r\n    this.averageFitness = this.getTotalFitness() / this.populationSize;\r\n\r\n    this.currentBestFitness = 0;\r\n    this.currentWorstFitness = 0;\r\n\r\n    for (const dna of this.population) {\r\n      let fitness = dna.getFitness();\r\n\r\n      // Best fitness of all time\r\n      if (fitness > this.bestFitness) {\r\n        this.bestFitness = fitness;\r\n        this.bestPhrase = dna.toString();\r\n      }\r\n\r\n      // Best fitness for this current generation\r\n      if (fitness > this.currentBestFitness) {\r\n        this.currentBestFitness = fitness;\r\n      }\r\n\r\n      // Worst fitness for this current generation\r\n      if (\r\n        this.currentWorstFitness === 0 ||\r\n        fitness < this.currentWorstFitness\r\n      ) {\r\n        this.currentWorstFitness = fitness;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a random DNA from the population.\r\n   * @return {DNA} The random DNA\r\n   */\r\n  getRandomDNA() {\r\n    let i = 0;\r\n    let rand = Math.random();\r\n    let totalFitness = this.getTotalFitness();\r\n\r\n    while (rand >= 0) {\r\n      rand -= this.population[i].getFitness() / totalFitness;\r\n      i++;\r\n    }\r\n\r\n    return this.population[i - 1];\r\n  }\r\n\r\n  /**\r\n   * Returns the total fitness of all DNA's in the population.\r\n   * @return {number} The total fitness\r\n   */\r\n  getTotalFitness() {\r\n    let totalFitness = 0;\r\n\r\n    for (const dna of this.population) {\r\n      totalFitness += dna.getFitness();\r\n    }\r\n\r\n    return totalFitness;\r\n  }\r\n\r\n  /**\r\n   * Evolution is finished when the best fitness equals the target fitness.\r\n   */\r\n  isFinished() {\r\n    return this.bestFitness >= TARGET_FITNESS;\r\n  }\r\n\r\n  /**\r\n   * Returns the generation count.\r\n   * @return {number} The generation count\r\n   */\r\n  getGenerationCount() {\r\n    return this.generationCount;\r\n  }\r\n\r\n  /**\r\n   * Returns the best phrase.\r\n   * @return {string} The best phrase\r\n   */\r\n  getBestPhrase() {\r\n    return this.bestPhrase;\r\n  }\r\n\r\n  /**\r\n   * Returns the best fitness.\r\n   * @return {number} The best fitness\r\n   */\r\n  getBestFitness() {\r\n    return this.bestFitness;\r\n  }\r\n\r\n  /**\r\n   * Returns the average fitness.\r\n   * @return {number} The average fitness\r\n   */\r\n  getAverageFitness() {\r\n    return this.averageFitness;\r\n  }\r\n\r\n  /**\r\n   * Returns the current best fitness.\r\n   * @return {number} The current best fitness\r\n   */\r\n  getCurrentBestFitness() {\r\n    return this.currentBestFitness;\r\n  }\r\n\r\n  /**\r\n   * Returns the current worst fitness.\r\n   * @return {number} The current worst fitness\r\n   */\r\n  getCurrentWorstFitness() {\r\n    return this.currentWorstFitness;\r\n  }\r\n\r\n  /**\r\n   * Returns the population as an array of strings.\r\n   * @return {Array} The population as an array of strings.\r\n   */\r\n  getPopulationArr() {\r\n    return this.population.map((dna) => dna.toString());\r\n  }\r\n}\r\n\r\nexport default Population;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Button = ({ value, onClick }) => {\r\n  const handleOnClick = (e) => {\r\n    // Remove focus from button\r\n    e.target.blur();\r\n    onClick();\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className=\"btn btn-primary btn-lg\"\r\n      type=\"button\"\r\n      onClick={handleOnClick}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  value: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst COL_THRESHOLD = 25;\r\n\r\nconst PopulationRender = ({ populationArr, targetPhrase }) => {\r\n  const numCols = Math.ceil(populationArr.length / COL_THRESHOLD);\r\n  const perCol = Math.trunc(populationArr.length / numCols);\r\n  let remainder = populationArr.length % numCols;\r\n\r\n  const pops = [];\r\n  for (let i = 0; i < numCols; i++) {\r\n    pops.push(populationArr.slice(i * perCol, i * perCol + perCol));\r\n  }\r\n\r\n  for (let i = 0; i < remainder; i++) {\r\n    pops[pops.length - 1 - i].push(populationArr[populationArr.length - 1 - i]);\r\n  }\r\n\r\n  return pops.map((pop, i) => {\r\n    return (\r\n      <div className=\"col col-auto\" key={i}>\r\n        {pop.map((word, j) => {\r\n          return (\r\n            <div className=\"row\" key={String(i + j)}>\r\n              <div className=\"col\">\r\n                <h5 className={word === targetPhrase ? \"font-weight-bold\" : \"\"}>\r\n                  {word}\r\n                </h5>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\nPopulationRender.defaultProps = {\r\n  populationArr: [],\r\n};\r\n\r\nPopulationRender.propTypes = {\r\n  populationArr: PropTypes.array,\r\n};\r\n\r\nexport default PopulationRender;\r\n","import React, { Component } from \"react\";\r\nimport Population from \"./logic/population\";\r\nimport Button from \"./components/button\";\r\nimport PopulationRender from \"./components/population-render\";\r\nimport GithubCorner from \"react-github-corner\";\r\n\r\nconst FRAME_RATE = 60;\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      targetPhrase: \"\",\r\n      populationSize: 250,\r\n      mutationRate: 5,\r\n      generationCount: 0,\r\n      bestPhrase: \"\",\r\n      bestFitness: 0,\r\n      averageFitness: 0,\r\n      currentBestFitness: 0,\r\n      currentWorstFitness: 0,\r\n      populationArr: [],\r\n      isRunning: false,\r\n    };\r\n  }\r\n\r\n  handleOnChangeState = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleOnClickStart = () => {\r\n    if (this.state.targetPhrase.length > 0) {\r\n      this.population = new Population(\r\n        this.state.targetPhrase,\r\n        this.state.populationSize,\r\n        this.state.mutationRate * 0.01\r\n      );\r\n      this.setState({\r\n        isRunning: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.timer = setInterval(() => this.update(), 1000 / FRAME_RATE);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  /**\r\n   * Update loop.\r\n   */\r\n  update = () => {\r\n    if (!this.state.isRunning) {\r\n      return;\r\n    }\r\n\r\n    // Population done, toggle isRunning\r\n    if (this.population.isFinished()) {\r\n      this.setState({\r\n        isRunning: false,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    // Population not done, keep going\r\n    this.population.nextGeneration();\r\n    this.setState({\r\n      generationCount: this.population.getGenerationCount(),\r\n      bestPhrase: this.population.getBestPhrase(),\r\n      bestFitness: this.population.getBestFitness(),\r\n      averageFitness: this.population.getAverageFitness(),\r\n      currentBestFitness: this.population.getCurrentBestFitness(),\r\n      currentWorstFitness: this.population.getCurrentWorstFitness(),\r\n      populationArr: this.population.getPopulationArr(),\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Returns the fitness as a percentage string.\r\n   * @param {number} fitness The fitness to convert to a string\r\n   * @return {string} the fitness as a percentage string\r\n   */\r\n  getFitnessString = (fitness) => {\r\n    return Math.round(fitness * 100) + \"%\";\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App container text-center py-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <h1 className=\"font-weight-bold\">Infinite Monkey</h1>\r\n            <h5>\r\n              Simulates the infinite monkey theorem using a genetic algorithm.\r\n              <br />\r\n              Enter your target phrase, adjust the evolution parameters, and\r\n              watch your phrase evolve.\r\n            </h5>\r\n            <div className=\"row justify-content-center pt-3\">\r\n              <div className=\"col col-12 col-md-4 col-lg-3 pb-3\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Target phrase\"\r\n                  id=\"targetPhrase\"\r\n                  onChange={this.handleOnChangeState}\r\n                />\r\n              </div>\r\n              <div className=\"col col-12 col-md-4 col-lg-3 pb-3\">\r\n                <input\r\n                  type=\"range\"\r\n                  min={10}\r\n                  max={500}\r\n                  step={10}\r\n                  defaultValue={this.state.populationSize}\r\n                  id=\"populationSize\"\r\n                  onChange={this.handleOnChangeState}\r\n                />\r\n                <h5>Population size: {this.state.populationSize}</h5>\r\n              </div>\r\n              <div className=\"col col-12 col-md-4 col-lg-3 pb-3\">\r\n                <input\r\n                  type=\"range\"\r\n                  min={0}\r\n                  max={100}\r\n                  step={1}\r\n                  defaultValue={this.state.mutationRate}\r\n                  id=\"mutationRate\"\r\n                  onChange={this.handleOnChangeState}\r\n                />\r\n                <h5>Mutation rate: {this.state.mutationRate}</h5>\r\n              </div>\r\n            </div>\r\n            <div className=\"pt-3\">\r\n              <Button value=\"Start\" onClick={this.handleOnClickStart} />\r\n            </div>\r\n            <div className=\"row justify-content-center pt-4\">\r\n              <div className=\"col col-12 col-sm-6\">\r\n                <h5>Generations: {this.state.generationCount}</h5>\r\n                <h5>Best phrase: {this.state.bestPhrase}</h5>\r\n                <h5>\r\n                  Best fitness: {this.getFitnessString(this.state.bestFitness)}\r\n                </h5>\r\n                <h5>\r\n                  Average fitness:{\" \"}\r\n                  {this.getFitnessString(this.state.averageFitness)}\r\n                </h5>\r\n                <h5>\r\n                  Current best fitness:{\" \"}\r\n                  {this.getFitnessString(this.state.currentBestFitness)}\r\n                </h5>\r\n                <h5>\r\n                  Current worst fitness:{\" \"}\r\n                  {this.getFitnessString(this.state.currentWorstFitness)}\r\n                </h5>\r\n              </div>\r\n              <div className=\"col col-12 col-sm-6\">\r\n                <div className=\"row justify-content-center\">\r\n                  <PopulationRender\r\n                    populationArr={this.state.populationArr}\r\n                    targetPhrase={this.state.targetPhrase}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <GithubCorner\r\n          href=\"https://github.com/ryantran2165/infinite-monkey\"\r\n          bannerColor=\"#222\"\r\n          octoColor=\"#7fffd4\"\r\n          target=\"_blank\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./index.scss\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}